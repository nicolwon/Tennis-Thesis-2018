demo()
q()
library(rio)
library(dplyr)
library(knitr)
library(ggplot2)
library(rio)
library(dplyr)
library(knitr)
library(ggplot2)
transformer <- import("wo_ni_93.csv", fread=FALSE)
wo_ni_93 <- read.csv("~/Downloads/mie237_a1_data/wo_ni_93.csv")
View(wo_ni_93)
assign1 <- read.csv("~/Downloads/mie237_a1_data/wo_ni_93.csv")
View(assign1)
View(assign1)
wo_ni_93 <- read.csv("~/Downloads/mie237_a1_data/wo_ni_93.csv")
summary(lm(y ~ X1+X4+X2, data=y))
summary(lm(y ~ X2+X1, data=y2))
summary(lm(y ~ X2+X1, data=y2))
summary(lm(y ~ X2+X9+X3, data=y2))
summary(lm(y ~ X2+X9+X3, data=y2))
library("rstan")
options(mc.cores = parallel::detectCores())
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
plot(fit, ci_level = 0.95, outer_level = 0.999)
source('~/.active-rstudio-document', echo=TRUE)
print(fit)
gender = "m"
gender == "m"
# set working directory (you should change it appropriately)
base_dir = "/Users/nicolewongsoo/Documents/Fourth\ Year\ Uni/Thesis/workspace/Main"
setwd(base_dir)
# load libraries and set rstan's parallel computing options
library("rstan")
library("ggplot2")
# install.packages("data.table")
library(data.table)
# install.packages("overlapping")
# install.packages("digest")
library("overlapping")
library("lattice")
library("digest")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# all files
# points data
pointsfilenames = list.files("data", pattern="*points.csv", full.names=TRUE)
pointsdata = rbindlist(lapply(pointsfilenames,fread), fill=TRUE)
# matches data
matchesfilenames = list.files("data", pattern="*matches.csv", full.names=TRUE)
matchesdata = rbindlist(lapply(matchesfilenames,fread), fill=TRUE)
matches = matchesdata$match_id
# initialize iterated variables
difference = numeric(0)
overlapSumM = c(0)
overlapSumF = c(0)
# load stan file
model_bayesian = stan_model(file = "beta.stan")
matchID = matches[1]
match = subset(pointsdata, match_id == matchID)
data = match
# data cleaning
# remove incomplete match data
idx = which(matches == matchID)
matchdata = matchesdata[idx]
if (matchdata$match_num < 2000) { # male match
gender = "m"
setMin = 3
} else { # female match
gender = "f"
setMin = 2
}
setWinner = data$SetWinner
setWinner = setWinner[setWinner != 0]
# if both players' total num of set wins is less than the setMin, the data is incomplete
if (all(table(setWinner) < setMin)) {
print(paste(matchID , "INCOMPLETE"))
next
}
# data on who served the point
server = data$PointServer
# get indices of points where A/B served
indicesServerA = which(server == 1)
indicesServerB = which(server == 2)
firstPointInGame = min(which(server != 0))
# remove first point of game
indicesServerA = indicesServerA[!indicesServerA == firstPointInGame]
indicesServerB = indicesServerB[!indicesServerB == firstPointInGame]
removeFirstPointInGame = TRUE
# remove first point of every game and first point of match
if (removeFirstPointInGame) {
# get indices where the prev point was the end of a game
indicesGameEnd = which(data$GameWinner != 0)
# first point in game
firstPointA = indicesServerB[indicesServerB %in% indicesGameEnd] + 1
firstPointB = indicesServerA[indicesServerA %in% indicesGameEnd] + 1
# remove first points in game
indicesServerA = indicesServerA[!indicesServerA %in% firstPointA]
indicesServerB = indicesServerB[!indicesServerB %in% firstPointB]
}
# data on who won the point
winner = data$PointWinner
winner = replace(winner, winner==0, NA)
# points that A won [previous point]
indicesWinnerA = which(winner == 1)
# points that B won
indicesWinnerB = which(winner == 2)
# points where A won the previous point
indicesPrevWinnerA = indicesWinnerA + 1
# points where B won the previous point
indicesPrevWinnerB = indicesWinnerB + 1
# A served and won previous point
indicesPosMomentumA = intersect(indicesPrevWinnerA, indicesServerA)
# A served and lost previous point
indicesNegMomentumA = intersect(indicesPrevWinnerB, indicesServerA)
# B served and won previous point
indicesPosMomentumB = intersect(indicesPrevWinnerB, indicesServerB)
# B served and lost previous point
indicesNegMomentumB = intersect(indicesPrevWinnerA, indicesServerB)
# relabel data for point win probability
winnerA = winner
winnerA = replace(winnerA, winnerA == 2, 0) # winner == 2 is when A lost
winnerB = winner
winnerB = replace(winnerB, winnerB == 1, 0)
winnerB = replace(winnerB, winnerB == 2, 1)
# winner data
positiveMomentumA = winnerA[indicesPosMomentumA]
negativeMomentumA = winnerA[indicesNegMomentumA]
positiveMomentumB = winnerB[indicesPosMomentumB]
negativeMomentumB = winnerB[indicesNegMomentumB]
if (any(is.na(positiveMomentumA)) || any(is.na(negativeMomentumA)) || any(is.na(positiveMomentumB)) || any(is.na(negativeMomentumB))) {
print(paste(matchID, "MATCH CONTAINS ANOMALOUS POINTS"))
next
}
posWinsA = sum(positiveMomentumA)
posLossesA = length(positiveMomentumA) - posWinsA
negWinsA = sum(negativeMomentumA)
negLossesA = length(negativeMomentumA) - negWinsA
posWinsB = sum(positiveMomentumB)
posLossesB = length(positiveMomentumB) - posWinsB
negWinsB = sum(negativeMomentumB)
negLossesB = length(negativeMomentumB) - negWinsB
# find overlap
ovListA = list(pos = rbeta(2000, posWinsA+1, posLossesA+1), neg = rbeta(2000, negWinsA+1, negLossesA+1))
outA = overlap(ovListA, plot = TRUE)
# iterate through all matches and compute
for (matchID in matches) {
match = subset(pointsdata, match_id == matchID)
data = match
# data cleaning
# remove incomplete match data
idx = which(matches == matchID)
matchdata = matchesdata[idx]
if (matchdata$match_num < 2000) { # male match
gender = "m"
setMin = 3
} else { # female match
gender = "f"
setMin = 2
}
setWinner = data$SetWinner
setWinner = setWinner[setWinner != 0]
# if both players' total num of set wins is less than the setMin, the data is incomplete
if (all(table(setWinner) < setMin)) {
print(paste(matchID , "INCOMPLETE"))
next
}
# data on who served the point
server = data$PointServer
# get indices of points where A/B served
indicesServerA = which(server == 1)
indicesServerB = which(server == 2)
firstPointInGame = min(which(server != 0))
# remove first point of game
indicesServerA = indicesServerA[!indicesServerA == firstPointInGame]
indicesServerB = indicesServerB[!indicesServerB == firstPointInGame]
# NOTE: does momentum continue from game to game, when the server changes?
# for simplicity's sake I will ignore the first point of every game, but this can be changed
removeFirstPointInGame = TRUE
# remove first point of every game and first point of match
if (removeFirstPointInGame) {
# get indices where the prev point was the end of a game
indicesGameEnd = which(data$GameWinner != 0)
# first point in game
firstPointA = indicesServerB[indicesServerB %in% indicesGameEnd] + 1
firstPointB = indicesServerA[indicesServerA %in% indicesGameEnd] + 1
# remove first points in game
indicesServerA = indicesServerA[!indicesServerA %in% firstPointA]
indicesServerB = indicesServerB[!indicesServerB %in% firstPointB]
}
# indicesServerA and indicesServerB now respectively represent buckets 1 and 2
# note that player A is player 0 and player B is player 1 in the following code:
# data on who won the point
winner = data$PointWinner
winner = replace(winner, winner==0, NA)
# points that A won [previous point]
indicesWinnerA = which(winner == 1)
# points that B won
indicesWinnerB = which(winner == 2)
# points where A won the previous point
indicesPrevWinnerA = indicesWinnerA + 1
# points where B won the previous point
indicesPrevWinnerB = indicesWinnerB + 1
# A served and won previous point
indicesPosMomentumA = intersect(indicesPrevWinnerA, indicesServerA)
# A served and lost previous point
indicesNegMomentumA = intersect(indicesPrevWinnerB, indicesServerA)
# B served and won previous point
indicesPosMomentumB = intersect(indicesPrevWinnerB, indicesServerB)
# B served and lost previous point
indicesNegMomentumB = intersect(indicesPrevWinnerA, indicesServerB)
# relabel data for point win probability
winnerA = winner
winnerA = replace(winnerA, winnerA == 2, 0) # winner == 2 is when A lost
winnerB = winner
winnerB = replace(winnerB, winnerB == 1, 0)
winnerB = replace(winnerB, winnerB == 2, 1)
# winner data
positiveMomentumA = winnerA[indicesPosMomentumA]
negativeMomentumA = winnerA[indicesNegMomentumA]
positiveMomentumB = winnerB[indicesPosMomentumB]
negativeMomentumB = winnerB[indicesNegMomentumB]
if (any(is.na(positiveMomentumA)) || any(is.na(negativeMomentumA)) || any(is.na(positiveMomentumB)) || any(is.na(negativeMomentumB))) {
print(paste(matchID, "MATCH CONTAINS ANOMALOUS POINTS"))
next
}
posWinsA = sum(positiveMomentumA)
posLossesA = length(positiveMomentumA) - posWinsA
negWinsA = sum(negativeMomentumA)
negLossesA = length(negativeMomentumA) - negWinsA
posWinsB = sum(positiveMomentumB)
posLossesB = length(positiveMomentumB) - posWinsB
negWinsB = sum(negativeMomentumB)
negLossesB = length(negativeMomentumB) - negWinsB
# find overlap
ovListA = list(pos = rbeta(2000, posWinsA+1, posLossesA+1), neg = rbeta(2000, negWinsA+1, negLossesA+1))
outA = overlap(ovListA, plot = TRUE)
ovListB = list(pos = rbeta(2000, posWinsB + 1, posLossesB + 1), neg = rbeta(2000, negWinsB + 1, negLossesB + 1))
outB = overlap(ovListB, plot = TRUE)
if (gender == "m") {
overlapSumM = c(overlapSumM, outA$OV)
overlapSumM = c(overlapSumM, outB$OV)
} else {
overlapSumF = c(overlapSumF, outA$OV)
overlapSumF = c(overlapSumF, outB$OV)
}
# print which matches have been completed
print(matchID)
}
matchID = matches[1]
match = subset(pointsdata, match_id == matchID)
data = match
# data cleaning
# remove incomplete match data
idx = which(matches == matchID)
matchdata = matchesdata[idx]
if (matchdata$match_num < 2000) { # male match
gender = "m"
setMin = 3
} else { # female match
gender = "f"
setMin = 2
}
setWinner = data$SetWinner
setWinner = setWinner[setWinner != 0]
# if both players' total num of set wins is less than the setMin, the data is incomplete
if (all(table(setWinner) < setMin)) {
print(paste(matchID , "INCOMPLETE"))
next
}
# data on who served the point
server = data$PointServer
# get indices of points where A/B served
indicesServerA = which(server == 1)
indicesServerB = which(server == 2)
firstPointInGame = min(which(server != 0))
# remove first point of game
indicesServerA = indicesServerA[!indicesServerA == firstPointInGame]
indicesServerB = indicesServerB[!indicesServerB == firstPointInGame]
removeFirstPointInGame = TRUE
# remove first point of every game and first point of match
if (removeFirstPointInGame) {
# get indices where the prev point was the end of a game
indicesGameEnd = which(data$GameWinner != 0)
# first point in game
firstPointA = indicesServerB[indicesServerB %in% indicesGameEnd] + 1
firstPointB = indicesServerA[indicesServerA %in% indicesGameEnd] + 1
# remove first points in game
indicesServerA = indicesServerA[!indicesServerA %in% firstPointA]
indicesServerB = indicesServerB[!indicesServerB %in% firstPointB]
}
# data on who won the point
winner = data$PointWinner
winner = replace(winner, winner==0, NA)
# points that A won [previous point]
indicesWinnerA = which(winner == 1)
# points that B won
indicesWinnerB = which(winner == 2)
# points where A won the previous point
indicesPrevWinnerA = indicesWinnerA + 1
# points where B won the previous point
indicesPrevWinnerB = indicesWinnerB + 1
# A served and won previous point
indicesPosMomentumA = intersect(indicesPrevWinnerA, indicesServerA)
# A served and lost previous point
indicesNegMomentumA = intersect(indicesPrevWinnerB, indicesServerA)
# B served and won previous point
indicesPosMomentumB = intersect(indicesPrevWinnerB, indicesServerB)
# B served and lost previous point
indicesNegMomentumB = intersect(indicesPrevWinnerA, indicesServerB)
# relabel data for point win probability
winnerA = winner
winnerA = replace(winnerA, winnerA == 2, 0) # winner == 2 is when A lost
winnerB = winner
winnerB = replace(winnerB, winnerB == 1, 0)
winnerB = replace(winnerB, winnerB == 2, 1)
# winner data
positiveMomentumA = winnerA[indicesPosMomentumA]
negativeMomentumA = winnerA[indicesNegMomentumA]
positiveMomentumB = winnerB[indicesPosMomentumB]
negativeMomentumB = winnerB[indicesNegMomentumB]
if (any(is.na(positiveMomentumA)) || any(is.na(negativeMomentumA)) || any(is.na(positiveMomentumB)) || any(is.na(negativeMomentumB))) {
print(paste(matchID, "MATCH CONTAINS ANOMALOUS POINTS"))
next
}
posWinsA = sum(positiveMomentumA)
posLossesA = length(positiveMomentumA) - posWinsA
negWinsA = sum(negativeMomentumA)
negLossesA = length(negativeMomentumA) - negWinsA
posWinsB = sum(positiveMomentumB)
posLossesB = length(positiveMomentumB) - posWinsB
negWinsB = sum(negativeMomentumB)
negLossesB = length(negativeMomentumB) - negWinsB
# find overlap
ovListA = list(pos = rbeta(2000, posWinsA+1, posLossesA+1), neg = rbeta(2000, negWinsA+1, negLossesA+1))
outA = overlap(ovListA, plot = TRUE)
posWinsA
length(positiveMomentumA)
negWinsA
length(negativeMomentumA)
server
length(server)
62/4
ovListB = list(pos = rbeta(2000, posWinsB + 1, posLossesB + 1), neg = rbeta(2000, negWinsB + 1, negLossesB + 1))
outB = overlap(ovListB, plot = TRUE)
posWinsB
positiveMomentumB
negativeMomentumB
